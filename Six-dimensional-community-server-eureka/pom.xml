<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>Six-dimensional-community-server</artifactId>
        <groupId>No-Mans-Land</groupId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>Six-dimensional-community-server-eureka</artifactId>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <docker.repostory>registry.cn-hangzhou.aliyuncs.com</docker.repostory>
        <docker.registry.name>sdcommunity</docker.registry.name>
    </properties>

    <dependencies>
        <dependency>
            <groupId>No-Mans-Land</groupId>
            <artifactId>Six-dimensional-community-server-common</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
    </dependencies>
    <build>
<!--        <resources>&lt;!&ndash; 使用@@站位符，输出Dockerfile至docker文件夹 &ndash;&gt;
            <resource>
                <directory>src/main/docker</directory>
                <filtering>true</filtering>
            </resource>
        </resources>-->
        <!-- 为当前工程起名称 -->
        <finalName>app</finalName>
        <plugins>
            <!-- spring boot的maven插件 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!-- docker的maven插件，官网：https://github.com/spotify/docker‐maven‐plugin -->
<!--            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.4.13</version>
                <configuration>
                    <dockerDirectory>target/docker</dockerDirectory>
                    &lt;!&ndash; 私有仓库配置，需要settings.xml文件配合serverId对应的服务地址 &ndash;&gt;
                    <serverId>docker-aliyun</serverId>
                    <registryUrl>registry.cn-hangzhou.aliyuncs.com</registryUrl>
                    &lt;!&ndash; 做成镜像后镜像的名称 &ndash;&gt;
                    <imageName>${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.parent.version}</imageName>
                    &lt;!&ndash; 基础镜像 &ndash;&gt;
                    <baseImage>openjdk:8-jdk</baseImage>
                    &lt;!&ndash; 执行命令，打jar包 &ndash;&gt;
                    <entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                    <dockerHost>http://192.168.199.138:2375</dockerHost>
                </configuration>
            </plugin>-->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.4.13</version>
                <configuration>
                    <!-- 做成镜像后镜像的名称 -->
                    <imageName>${docker.repostory}/${docker.registry.name}/eureka:latest</imageName>
                    <!-- 基础镜像 -->
                    <baseImage>openjdk:8-jdk</baseImage>
                    <!-- 执行命令，打jar包 -->
                    <entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                    <dockerHost>http://192.168.199.138:2375</dockerHost>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>